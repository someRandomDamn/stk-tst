{"version":3,"sources":["components/Staking.module.css","assets/unstake.png","assets/icon.png","App.module.css","components/CreateStaking.js","components/Info.js","components/Staking.js","App.js","index.js","assets/stake.png"],"names":["module","exports","Staking","icon","inputDiv","input","totals","goMax","stakeButton","unstakeButton","stakeIcon","__webpack_require__","p","Grid","Child1","Child2","Child3","childHeight","curtain","CreateStaking","props","emptyStaking","stakeAddress","poolAddress","startBlock","finishBlock","poolTokenSupply","hasWhitelisting","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","inputChangeHandler","event","preventDefault","prev","target","name","value","createStakingHandler","react_default","a","createElement","className","classes","onChange","autoComplete","placeholder","required","type","onClick","createStakingPoolHandler","src","alt","Info","totalStaked","allStakedAmount","allRewardDebt","allPaidReward","accTokensPerShare","participants","pendingReward","myStake","rewardPerSec","startTime","finishTime","lastRewardTime","userBalance","_useState3","_useState4","currentStakingContract","setCurrentStakingContract","account","stakingContractHandler","min","step","inputHandler","stakeHandler","unStakeHandler","unstakeIcon","reinvestRewardsHandler","App","setAccount","id","network","setNetwork","_useState5","_useState6","testTokenContract","setTestTokenContract","_useState7","_useState8","stakingCreationContract","setStakingCreationContract","_useState9","_useState10","tokenStakingContract","setTokenStakingContract","_useState11","_useState12","_useState13","_useState14","setCreateStaking","_useState15","_useState16","setAllStakedAmount","_useState17","_useState18","setMyStake","_useState19","_useState20","setAllRewardDebt","_useState21","_useState22","setAllPaidReward","_useState23","_useState24","setAccTokensPerShare","_useState25","_useState26","setParticipants","_useState27","_useState28","setPendingReward","_useState29","_useState30","setLastRewardTime","_useState31","_useState32","setStartTime","_useState33","_useState34","setFinishTime","_useState35","_useState36","setRewardPerSec","_useState37","_useState38","appStatus","setAppStatus","_useState39","_useState40","loader","setLoader","_useState41","_useState42","setUserBalance","_useState43","_useState44","currentStakingContractAddress","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","fetchDataFromBlockchain","stop","apply","this","arguments","ethEnabled","_ref2","_callee2","web3","accounts","networkId","networkType","_web","testToken","testTokenBalance","convertedBalance","_web2","stakingCreationC","stakingContract","_yield$Promise$all","_yield$Promise$all2","_myStake","_allRewardDebt","_allPaidReward","_accTokensPerShare","_participants","_pendingReward","_lastRewardTime","_rewardPerSec","_startTime","_finishTime","_allStakedAmount","_context2","console","log","window","ethereum","request","method","Web3","eth","getAccounts","sent","net","getId","getNetworkType","objectSpread","Contract","TestTokenAbi","methods","balanceOf","call","utils","fromWei","toString","alert","TokenStakingAbi","StakingAbi","Promise","all","getUserInfo","moment","unix","format","components_CreateStaking","received","stakingObject","convertedToWei","toWei","approve","send","from","on","hash","createStakingPool","receipt","confirmationNumber","error","code","message","components_Staking","convertToWei","withdrawStake","stakeTokens","contract","claimRewardsHandler","reinvestTokens","components_Info","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a5ead769.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Staking\":\"Staking_Staking__Hf4Rk\",\"icon\":\"Staking_icon__3v_8B\",\"inputDiv\":\"Staking_inputDiv__bRjrw\",\"input\":\"Staking_input__1Z2Yu\",\"totals\":\"Staking_totals__uP4fZ\",\"goMax\":\"Staking_goMax__JDdIT\",\"stakeButton\":\"Staking_stakeButton__1-uE8\",\"unstakeButton\":\"Staking_unstakeButton__Hw_13\",\"stakeIcon\":\"Staking_stakeIcon__3l7fE\"};","module.exports = __webpack_public_path__ + \"static/media/unstake.cebdc53d.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.6b47307e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"App_Grid__38lLN\",\"Child1\":\"App_Child1__3ld-d\",\"Child2\":\"App_Child2__3F3CH\",\"Child3\":\"App_Child3__36NvU\",\"childHeight\":\"App_childHeight__2uja6\",\"curtain\":\"App_curtain__2ynil\"};","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\n\nconst CreateStaking = (props) => {\n    const emptyStaking = {\n        stakeAddress: '',\n        poolAddress: '',\n        startBlock: '',\n        finishBlock: '',\n        poolTokenSupply: '',\n        hasWhitelisting: false,\n    };\n    const [inputValue, setInputValue] = useState(emptyStaking);\n\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(prev => {\n        prev[event.target.name] = event.target.value;\n        return prev;\n    });\n    props.createStakingHandler(event.target.value);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <h1> Create Staking</h1>\n\n      <div className={classes.inputDiv}>\n          <div>\n              Staking Token<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.stakeAddress} autoComplete=\"off\" name=\"stakeAddress\" placeholder=\"Address of Token to be staked\" required=\"\" type=\"text\"/><br/>\n\n              Pool Token<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.poolAddress} autoComplete=\"off\" name=\"poolAddress\" placeholder=\"Address of reward Token\" required=\"\" type=\"text\"/><br/>\n\n              Start Time Stamp<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.startBlock} name=\"startBlock\" placeholder=\"Start Time Stamp\" required=\"\" type=\"number\"/><br/>\n\n              Finish Time Stamp<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.finishBlock} name=\"finishBlock\" placeholder=\"Finish Time Stamp\" required=\"\" type=\"number\"/><br/>\n\n              Pool Token Supply<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.poolTokenSupply} name=\"poolTokenSupply\" placeholder=\"Pool Token Supply\" required=\"\" type=\"number\"/><br/>\n\n          </div>\n          <button\n              className={classes.stakeButton}\n              onClick={() => {\n                  props.createStakingPoolHandler(inputValue);\n                  setInputValue(emptyStaking);\n              }}\n          >\n              <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n              <p>Create staking</p>\n          </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateStaking;\n","import React  from 'react';\nimport classes from './Staking.module.css';\n\nconst Info = (props) => {\n\n  return (\n    <div className={classes.Staking}>\n        <div className={classes.totals}>Total Staked (by all users): {props.totalStaked}\n            {/*<div>&nbsp;</div>*/}\n            <h5>All staked amount: {props.allStakedAmount} </h5>\n            <h5>All rewards debt: {props.allRewardDebt} </h5>\n            <h5>All paid rewards: {props.allPaidReward} </h5>\n            <h5>Acc tokens per share: {props.accTokensPerShare} </h5>\n            <h5>Participants: {props.participants} </h5>\n            <h5>Pending reward: {props.pendingReward} </h5>\n            <h5>My stake:{props.myStake}</h5>\n            <h5>Reward per sec:{' '} {props.rewardPerSec}</h5>\n            <h5>Staking start:{' '} {props.startTime}</h5>\n            <h5>Staking end:{' '} {props.finishTime}</h5>\n            <h5>Last reward time:{' '} {props.lastRewardTime}</h5>\n            <h5 className={classes.goMax}>My balance: {props.userBalance}</h5>\n          </div>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\nimport unstakeIcon from '../assets/unstake.png';\nimport icon from '../assets/icon.png';\n\nconst Staking = (props) => {\n  const [inputValue, setInputValue] = useState('');\n  const [currentStakingContract, setCurrentStakingContract] = useState('');\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    props.inputHandler(event.target.value);\n  };\n\n    const setCurrentContractHandler = (event) => {\n        event.preventDefault();\n        setCurrentStakingContract(event.target.value);\n    };\n\n  const goMax = () => {\n    setInputValue(props.userBalance);\n    props.inputHandler(props.userBalance);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <img src={icon} alt=\"logo\" className={classes.icon} />\n      <p>{props.account}</p>\n\n        <div className={classes.inputDiv}>\n            <input\n                className={classes.input}\n                onChange={setCurrentContractHandler}\n                value={currentStakingContract}\n                placeholder=\"Enter created staking contract to see details\"\n            ></input>\n            <button\n                className={classes.stakeButton}\n                onClick={() => {props.stakingContractHandler(currentStakingContract)}}\n            >        <p>Choose staking contract</p>\n            </button>\n        </div>\n        <br/><br/>\n\n      <div className={classes.inputDiv}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          onChange={inputChangeHandler}\n          value={inputValue}\n        ></input>\n      </div>\n      <button\n        className={classes.stakeButton}\n        onClick={() => {\n          props.stakeHandler();\n          setInputValue('');\n        }}\n      >\n        <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n        <p>Stake</p>\n      </button>\n      &nbsp; &nbsp;\n      <button className={classes.unstakeButton} onClick={props.unStakeHandler}>\n        <img\n          src={unstakeIcon}\n          alt=\"unstake icon\"\n          className={classes.stakeIcon}\n        />\n        <p>Unstake (auto-harvest)</p>\n      </button>\n        &nbsp; &nbsp;\n        <button className={classes.unstakeButton} onClick={props.reinvestRewardsHandler}>\n            <img\n                src={unstakeIcon}\n                alt=\"unstake icon\"\n                className={classes.stakeIcon}\n            />\n            <p>Reinvest</p>\n        </button>\n\n    </div>\n  );\n};\n\nexport default Staking;\n","import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport classes from './App.module.css';\nimport TestTokenAbi from '../src/abis/TestToken.json';\nimport TokenStakingAbi from '../src/abis/StakingCreation.json';\nimport StakingAbi from '../src/abis/Staking.json';\nimport CreateStaking from \"./components/CreateStaking\";\nimport Info from \"./components/Info\";\nimport Staking from './components/Staking';\nimport moment from 'moment';\n\nconst App = () => {\n  const [account, setAccount] = useState('Connecting to Metamask..');\n  const [network, setNetwork] = useState({ id: '0', name: 'none' });\n  const [testTokenContract, setTestTokenContract] = useState('');\n  const [stakingCreationContract, setStakingCreationContract] = useState('');\n  const [tokenStakingContract, setTokenStakingContract] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [createStaking, setCreateStaking] = useState({\n    stakeAddress: '',\n    poolAddress: '',\n    startBlock: '',\n    finishBlock: '',\n    poolTokenSupply: '',\n    hasWhitelisting: false,\n  });\n  const [allStakedAmount, setAllStakedAmount] = useState(0);\n  const [myStake, setMyStake] = useState(0);\n  const [allRewardDebt, setAllRewardDebt] = useState(0);\n  const [allPaidReward, setAllPaidReward] = useState(0);\n  const [accTokensPerShare, setAccTokensPerShare] = useState(0);\n  const [participants, setParticipants] = useState(0);\n  const [pendingReward, setPendingReward] = useState(0);\n  const [lastRewardTime, setLastRewardTime] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [finishTime, setFinishTime] = useState(0);\n  const [rewardPerSec, setRewardPerSec] = useState(0);\n\n  const [appStatus, setAppStatus] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [userBalance, setUserBalance] = useState('0');\n  const [currentStakingContractAddress, setCurrentStakingContract] = useState('');\n\n  const tokenContractAddress = '0x9f11c83606fe28542f0278797c78cb66488d7eef';\n  const stakingContractAddress = '0x5564F5c9f63B8C69d0D1D188306c96F1CD9E3fFD';\n\n  useEffect(() => {\n    //connecting to ethereum blockchain\n    const ethEnabled = async () => {\n      fetchDataFromBlockchain();\n    };\n\n    ethEnabled();\n  }, []);\n\n  const fetchDataFromBlockchain = async () => {\n    console.log('currentStakingContractAddress');\n    console.log(currentStakingContractAddress);\n    if (window.ethereum) {\n      // await window.ethereum.send('eth_requestAccounts');\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n\n      //connecting to metamask\n      let web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n\n      //loading users network ID and name\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      setNetwork({ ...network, id: networkId, name: networkType });\n\n      //loading TestTokenAbi contract data\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const testToken = new web3.eth.Contract(\n          TestTokenAbi,\n          tokenContractAddress\n        );\n        setTestTokenContract(testToken);\n\n        //  fetching balance of Testtoken and storing in state\n        let testTokenBalance = await testToken.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          testTokenBalance.toString(),\n          'Ether'\n        );\n        setUserBalance(convertedBalance);\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TestToken contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const stakingCreationC = new web3.eth.Contract(\n          TokenStakingAbi,\n          stakingContractAddress,\n        );\n        setStakingCreationContract(stakingCreationC);\n\n        if (currentStakingContractAddress) {\n          const stakingContract = new web3.eth.Contract(\n              StakingAbi,\n              currentStakingContractAddress,\n          );\n          console.log(currentStakingContractAddress);\n          setTokenStakingContract(stakingContract);\n\n          let [\n            myStake,\n            allRewardDebt,\n            allPaidReward,\n            accTokensPerShare,\n            participants,\n            pendingReward,\n            lastRewardTime,\n            rewardPerSec,\n            startTime,\n            finishTime,\n            allStakedAmount,\n          ] = await Promise.all([\n            stakingContract.methods.getUserInfo(accounts[0]).call(),\n            stakingContract.methods.allRewardDebt().call(),\n            stakingContract.methods.allPaidReward().call(),\n            stakingContract.methods.accTokensPerShare().call(),\n            stakingContract.methods.participants().call(),\n            stakingContract.methods.pendingReward(accounts[0]).call(),\n            stakingContract.methods.lastRewardTime().call(),\n            stakingContract.methods.rewardPerSec().call(),\n            stakingContract.methods.startTime().call(),\n            stakingContract.methods.finishTime().call(),\n            stakingContract.methods.allStakedAmount().call(),\n          ])\n\n          myStake = window.web3.utils.fromWei(myStake[0].toString(), 'Ether');\n          allRewardDebt = window.web3.utils.fromWei(allRewardDebt.toString(), 'Ether');\n          allPaidReward = window.web3.utils.fromWei(allPaidReward.toString(), 'Ether');\n          accTokensPerShare = window.web3.utils.fromWei(accTokensPerShare.toString(), 'Ether');\n          pendingReward = window.web3.utils.fromWei(pendingReward.toString(), 'Ether');\n          rewardPerSec = window.web3.utils.fromWei(rewardPerSec.toString(), 'Ether');\n          allStakedAmount = allStakedAmount ? window.web3.utils.fromWei(allStakedAmount.toString(), 'Ether') : 0;\n          startTime = moment.unix(startTime).format(\"YYYY-MM-DD HH:mm\");\n          finishTime =  moment.unix(finishTime).format(\"YYYY-MM-DD HH:mm\");\n          lastRewardTime =  moment.unix(lastRewardTime).format(\"YYYY-MM-DD HH:mm\");\n\n          setMyStake(myStake);\n          setAllRewardDebt(allRewardDebt);\n          setAllPaidReward(allPaidReward);\n          setAccTokensPerShare(accTokensPerShare);\n          setPendingReward(pendingReward);\n          setRewardPerSec(rewardPerSec);\n          setAllStakedAmount(allStakedAmount);\n          setStartTime(startTime);\n          setFinishTime(finishTime);\n          setLastRewardTime(lastRewardTime);\n          setParticipants(participants);\n        } else {\n          console.log('exited');\n        }\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'Staking contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      //removing loader\n      setLoader(false);\n    } else if (!window.web3) {\n      setAppStatus(false);\n      setAccount('Metamask is not detected');\n      setLoader(false);\n    }\n  };\n\n  const inputHandler = (received) => {\n    setInputValue(received);\n  };\n\n  const createStakingHandler = (received) => {\n    setCreateStaking(received);\n  };\n\n  const stakingContractHandler = (contract) => {\n    setCurrentStakingContract(contract);\n    console.log(contract);\n    fetchDataFromBlockchain();\n  };\n\n  const stakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether');\n\n        //aproving tokens for spending\n        testTokenContract.methods\n          .approve(currentStakingContractAddress, convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            tokenStakingContract.methods\n              .stakeTokens(convertToWei)\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n          })\n          .on('error', function(error) {\n            setLoader(false);\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const unStakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n        tokenStakingContract.methods\n          .withdrawStake(convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n      }\n      setInputValue('');\n    }\n  };\n\n  const claimRewardsHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n        tokenStakingContract.methods\n          .withdrawStake(convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n      }\n      setInputValue('');\n    }\n  };\n\n  const reinvestRewardsHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      tokenStakingContract.methods\n          .reinvestTokens()\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n\n      setInputValue('');\n    }\n  };\n\n  const createStakingPoolHandler = (stakingObject) => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      let convertedToWei = window.web3.utils.toWei(stakingObject.poolTokenSupply, 'Ether');\n\n      //aproving tokens for spending\n      testTokenContract.methods\n        .approve(stakingContractAddress, convertedToWei)\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          stakingCreationContract.methods.createStakingPool(\n                stakingObject.stakeAddress,\n                stakingObject.poolAddress,\n                stakingObject.startBlock,\n                stakingObject.finishBlock,\n                convertedToWei,\n                stakingObject.hasWhitelisting,\n              )\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n        })\n        .on('error', function(error) {\n          setLoader(false);\n          console.log('Error Code:', error.code);\n          console.log(error.message);\n        });\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className={classes.Grid}>\n      {loader ? <div className={classes.curtain}></div> : null}\n      <div className={classes.Child1}>\n        <div>\n          <CreateStaking\n            createStakingHandler={createStakingHandler}\n            createStakingPoolHandler={createStakingPoolHandler}\n          />\n        </div>\n      </div>\n      <div className={classes.Child2}>\n        <div className={classes.childHeight}>\n          <Staking\n              account={account}\n              userBalance={userBalance}\n              unStakeHandler={unStakeHandler}\n              stakeHandler={stakeHandler}\n              inputHandler={inputHandler}\n              stakingContractHandler={stakingContractHandler}\n              claimRewardsHandler={claimRewardsHandler}\n              reinvestRewardsHandler={reinvestRewardsHandler}\n          />\n        </div>\n      </div>\n      <div className={classes.Child3}>\n        <div>\n          <Info\n              account={account}\n\n              myStake={myStake}\n              allRewardDebt={allRewardDebt}\n              allPaidReward={allPaidReward}\n              accTokensPerShare={accTokensPerShare}\n              participants={participants}\n              pendingReward={pendingReward}\n              lastRewardTime={lastRewardTime}\n              startTime={startTime}\n              finishTime={finishTime}\n              rewardPerSec={rewardPerSec}\n              allStakedAmount={allStakedAmount}\n              userBalance={userBalance}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/stake.e8708439.png\";"],"sourceRoot":""}