{"version":3,"sources":["assets/unstake.png","components/Staking.module.css","assets/stake.png","assets/icon.png","components/Staking.js","App.js","index.js","App.module.css"],"names":["module","exports","__webpack_require__","p","Staking","icon","inputDiv","input","totals","goMax","stakeButton","unstakeButton","stakeIcon","props","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","className","classes","src","alt","account","apy","type","min","step","onChange","event","preventDefault","target","value","inputHandler","onClick","stakeHandler","unStakeHandler","unstakeIcon","claimRewardsHandler","totalStaked","myStake","myReward","userBalance","contractBalance","App","setAccount","_useState3","id","name","_useState4","network","setNetwork","_useState5","_useState6","testTokenContract","setTestTokenContract","_useState7","_useState8","tokenStakingContract","setTokenStakingContract","_useState9","_useState10","_useState11","_useState12","setContractBalance","_useState13","_useState14","setTotalStaked","_useState15","_useState16","setMyStake","_useState17","_useState18","setMyReward","_useState19","_useState20","appStatus","setAppStatus","_useState21","_useState22","loader","setLoader","_useState23","_useState24","setUserBalance","_useState25","_useState26","setApy","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetchDataFromBlockchain","stop","apply","this","arguments","ethEnabled","_ref2","_callee2","web3","accounts","networkId","networkType","_web","testToken","testTokenBalance","convertedBalance","_totalStaked","_web2","tokenStaking","_myStake","_convertedBalance","tempTotalStaked","convertedTotalBalance","_myReward","convertedRewardBalance","_context2","window","ethereum","request","method","Web3","eth","getAccounts","sent","net","getId","getNetworkType","objectSpread","Contract","TestTokenAbi","methods","balanceOf","call","utils","fromWei","toString","alert","TokenStakingAbi","amountStaked","totalDeposited","rewardOf","Grid","curtain","Child","components_Staking","withdrawAll","send","from","on","hash","receipt","confirmationNumber","error","console","log","code","message","convertToWei","toWei","approve","deposit","received","claimRewards","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.21dcafd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unstake.cebdc53d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Staking\":\"Staking_Staking__Hf4Rk\",\"icon\":\"Staking_icon__3v_8B\",\"inputDiv\":\"Staking_inputDiv__bRjrw\",\"input\":\"Staking_input__1Z2Yu\",\"totals\":\"Staking_totals__uP4fZ\",\"goMax\":\"Staking_goMax__JDdIT\",\"stakeButton\":\"Staking_stakeButton__1-uE8\",\"unstakeButton\":\"Staking_unstakeButton__Hw_13\",\"stakeIcon\":\"Staking_stakeIcon__3l7fE\"};","module.exports = __webpack_public_path__ + \"static/media/stake.e8708439.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.6b47307e.png\";","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\nimport unstakeIcon from '../assets/unstake.png';\nimport icon from '../assets/icon.png';\n\nconst Staking = (props) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    props.inputHandler(event.target.value);\n  };\n\n  const goMax = () => {\n    setInputValue(props.userBalance);\n    props.inputHandler(props.userBalance);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <img src={icon} alt=\"logo\" className={classes.icon} />\n      <h1> Yield Farming / Token Staking dApp</h1>\n      <p>{props.account}</p>\n      <h3>\n        {props.apy}% (APY) - {props.apy / 365}% Daily Earnings\n      </h3>\n      <div className={classes.inputDiv}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          onChange={inputChangeHandler}\n          value={inputValue}\n        ></input>\n      </div>\n      <button\n        className={classes.stakeButton}\n        onClick={() => {\n          props.stakeHandler();\n          setInputValue('');\n        }}\n      >\n        <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n        <p>Stake</p>\n      </button>\n      &nbsp; &nbsp;\n      <button className={classes.unstakeButton} onClick={props.unStakeHandler}>\n        <img\n          src={unstakeIcon}\n          alt=\"unstake icon\"\n          className={classes.stakeIcon}\n        />\n        <p>Unstake All</p>\n      </button>\n        <button className={classes.unstakeButton} onClick={props.claimRewardsHandler}>\n            <img\n                src={unstakeIcon}\n                alt=\"unstake icon\"\n                className={classes.stakeIcon}\n            />\n            <p>Claim Rewards</p>\n        </button>\n      <div className={classes.totals}>\n        <h4>\n          Total Staked (by all users): {props.totalStaked} QTest\n        </h4>\n        <div>&nbsp;</div>\n        <h5>My Stake: {props.myStake} QTest </h5>\n        <h5>\n          My Reward:{' '}\n          {props.myReward} QTest\n        </h5>\n        <h5 onClick={goMax} className={classes.goMax}>\n          My balance: {props.userBalance} QTest\n        </h5>\n        <h5 className={classes.goMax}>\n          Contract balance: {props.contractBalance} QTest\n        </h5>\n      </div>\n    </div>\n  );\n};\n\nexport default Staking;\n","import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport classes from './App.module.css';\nimport TestTokenAbi from '../src/abis/TestToken.json';\nimport TokenStakingAbi from '../src/abis/TokenStaking.json';\nimport Staking from './components/Staking';\n\nconst App = () => {\n  const [account, setAccount] = useState('Connecting to Metamask..');\n  const [network, setNetwork] = useState({ id: '0', name: 'none' });\n  const [testTokenContract, setTestTokenContract] = useState('');\n  const [tokenStakingContract, setTokenStakingContract] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [contractBalance, setContractBalance] = useState('0');\n  const [totalStaked, setTotalStaked] = useState(0);\n  const [myStake, setMyStake] = useState(0);\n  const [myReward, setMyReward] = useState(0);\n  const [appStatus, setAppStatus] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [userBalance, setUserBalance] = useState('0');\n  const [apy, setApy] = useState(0);\n\n  const tokenContractAddress = '0xF891A8A750dC23C40cf8Aca1E643350Acb381153';\n  const stakingContractAddress = '0xDDB97C7863c7950FC01c51f235C4c137d6683479';\n\n  useEffect(() => {\n    //connecting to ethereum blockchain\n    const ethEnabled = async () => {\n      fetchDataFromBlockchain();\n    };\n\n    ethEnabled();\n  }, []);\n\n  const fetchDataFromBlockchain = async () => {\n    if (window.ethereum) {\n      // await window.ethereum.send('eth_requestAccounts');\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n\n      //connecting to metamask\n      let web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n\n      //loading users network ID and name\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      setNetwork({ ...network, id: networkId, name: networkType });\n\n      //loading TestTokenAbi contract data\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const testToken = new web3.eth.Contract(\n          TestTokenAbi,\n          tokenContractAddress\n        );\n        setTestTokenContract(testToken);\n        //  fetching balance of Testtoken and storing in state\n        let testTokenBalance = await testToken.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          testTokenBalance.toString(),\n          'Ether'\n        );\n        setUserBalance(convertedBalance);\n\n        //fetching contract balance\n        //updating total staked balance\n        let totalStaked = await testToken.methods\n          .balanceOf(stakingContractAddress)\n          .call();\n\n        convertedBalance = window.web3.utils.fromWei(\n          totalStaked.toString(),\n          'Ether'\n        );\n        //removing initial balance\n        setContractBalance(convertedBalance);\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TestToken contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const tokenStaking = new web3.eth.Contract(\n          TokenStakingAbi,\n          stakingContractAddress,\n        );\n\n        setTokenStakingContract(tokenStaking);\n        //  fetching total staked TokenStaking  and storing in state\n        let myStake = await tokenStaking.methods\n          .amountStaked(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          myStake.toString(),\n          'Ether'\n        );\n        setMyStake(convertedBalance);\n\n        //checking totalStaked\n        let tempTotalStaked = await tokenStaking.methods.totalDeposited().call();\n        let convertedTotalBalance = window.web3.utils.fromWei(\n          tempTotalStaked.toString(),\n          'Ether'\n        );\n        setTotalStaked(convertedTotalBalance);\n\n        //  fetching total staked TokenStaking  and storing in state\n        let myReward = await tokenStaking.methods\n            .rewardOf(accounts[0])\n            .call();\n        let convertedRewardBalance = window.web3.utils.fromWei(\n            myReward.toString(),\n            'Ether'\n        );\n        setMyReward(convertedRewardBalance);\n\n        //fetching APY values from contract\n        // let tempApy = ((await tokenStaking.methods.defaultAPY().call()) / 1000) * 365;\n        setApy(250);\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TokenStaking contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      //removing loader\n      setLoader(false);\n    } else if (!window.web3) {\n      setAppStatus(false);\n      setAccount('Metamask is not detected');\n      setLoader(false);\n    }\n  };\n\n  const inputHandler = (received) => {\n    setInputValue(received);\n  };\n\n  const stakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether');\n\n        //aproving tokens for spending\n        testTokenContract.methods\n          .approve(stakingContractAddress, convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            tokenStakingContract.methods\n              .deposit(convertToWei)\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n          })\n          .on('error', function(error) {\n            setLoader(false);\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const unStakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      tokenStakingContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.message);\n          setLoader(false);\n        });\n\n      setInputValue('');\n    }\n  };\n\n  const claimRewardsHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      tokenStakingContract.methods\n          .claimRewards()\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className={classes.Grid}>\n      {loader ? <div className={classes.curtain}></div> : null}\n      <div className={classes.loader}></div>\n      <div className={classes.Child}>\n        <div>\n          <Staking\n            account={account}\n            totalStaked={totalStaked}\n            contractBalance={contractBalance}\n            myStake={myStake}\n            myReward={myReward}\n            userBalance={userBalance}\n            unStakeHandler={unStakeHandler}\n            stakeHandler={stakeHandler}\n            inputHandler={inputHandler}\n            claimRewardsHandler={claimRewardsHandler}\n            apy={apy}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"App_Grid__38lLN\",\"Child\":\"App_Child__1GUl4\",\"curtain\":\"App_curtain__2ynil\"};"],"sourceRoot":""}