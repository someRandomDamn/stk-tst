{"version":3,"sources":["components/Staking.module.css","assets/icon.png","App.module.css","components/CreateStaking.js","components/Info.js","components/Staking.js","App.js","index.js","assets/stake.png","assets/unstake.png"],"names":["module","exports","Staking","icon","inputDiv","input","totals","goMax","stakeButton","unstakeButton","stakeIcon","__webpack_require__","p","Grid","Child1","Child2","Child3","childHeight","curtain","CreateStaking","props","emptyStaking","stakeAddress","poolAddress","startBlock","finishBlock","poolTokenSupply","hasWhitelisting","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","inputChangeHandler","event","preventDefault","prev","target","name","value","createStakingHandler","react_default","a","createElement","className","classes","onChange","autoComplete","placeholder","required","type","onClick","createStakingPoolHandler","src","alt","Info","totalStaked","allStakedAmount","allRewardDebt","allPaidReward","accTokensPerShare","participants","pendingReward","myStake","rewardPerSec","startTime","finishTime","lastRewardTime","userBalance","contractBalance","_useState3","_useState4","currentStakingContract","setCurrentStakingContract","account","stakingContractHandler","min","step","inputHandler","stakeHandler","unStakeHandler","unstakeIcon","claimRewardsHandler","App","setAccount","id","network","setNetwork","_useState5","_useState6","testTokenContract","setTestTokenContract","_useState7","_useState8","stakingCreationContract","setStakingCreationContract","_useState9","_useState10","tokenStakingContract","setTokenStakingContract","_useState11","_useState12","_useState13","_useState14","setCreateStaking","_useState15","_useState16","setContractBalance","_useState17","_useState18","_useState19","_useState20","myReward","_useState21","_useState22","setAllStakedAmount","_useState23","_useState24","_useState25","_useState26","setAllRewardDebt","_useState27","_useState28","setAllPaidReward","_useState29","_useState30","setAccTokensPerShare","_useState31","_useState32","setParticipants","_useState33","_useState34","setPendingReward","_useState35","_useState36","setLastRewardTime","_useState37","_useState38","setStartTime","_useState39","_useState40","setFinishTime","_useState41","_useState42","setRewardPerSec","_useState43","_useState44","appStatus","setAppStatus","_useState45","_useState46","loader","setLoader","_useState47","_useState48","setUserBalance","_useState49","_useState50","apy","_useState51","_useState52","currentStakingContractAddress","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","fetchDataFromBlockchain","stop","apply","this","arguments","ethEnabled","_ref2","_callee2","web3","accounts","networkId","networkType","_web","testToken","testTokenBalance","convertedBalance","_totalStaked","_web2","stakingCreationC","stakingContract","_yield$Promise$all","_yield$Promise$all2","_allRewardDebt","_allPaidReward","_accTokensPerShare","_participants","_pendingReward","_lastRewardTime","_rewardPerSec","_startTime","_finishTime","_allStakedAmount","_context2","console","log","window","ethereum","request","method","Web3","eth","getAccounts","sent","net","getId","getNetworkType","objectSpread","Contract","TestTokenAbi","methods","balanceOf","call","utils","fromWei","toString","alert","TokenStakingAbi","StakingAbi","Promise","all","moment","unix","format","components_CreateStaking","received","stakingObject","convertedToWei","toWei","approve","send","from","on","hash","createStakingPool","receipt","confirmationNumber","error","code","message","components_Staking","withdrawAll","convertToWei","stakeTokens","contract","claimRewards","components_Info","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.80065248.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Staking\":\"Staking_Staking__Hf4Rk\",\"icon\":\"Staking_icon__3v_8B\",\"inputDiv\":\"Staking_inputDiv__bRjrw\",\"input\":\"Staking_input__1Z2Yu\",\"totals\":\"Staking_totals__uP4fZ\",\"goMax\":\"Staking_goMax__JDdIT\",\"stakeButton\":\"Staking_stakeButton__1-uE8\",\"unstakeButton\":\"Staking_unstakeButton__Hw_13\",\"stakeIcon\":\"Staking_stakeIcon__3l7fE\"};","module.exports = __webpack_public_path__ + \"static/media/icon.6b47307e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"App_Grid__38lLN\",\"Child1\":\"App_Child1__3ld-d\",\"Child2\":\"App_Child2__3F3CH\",\"Child3\":\"App_Child3__36NvU\",\"childHeight\":\"App_childHeight__2uja6\",\"curtain\":\"App_curtain__2ynil\"};","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\n\nconst CreateStaking = (props) => {\n    const emptyStaking = {\n        stakeAddress: '',\n        poolAddress: '',\n        startBlock: '',\n        finishBlock: '',\n        poolTokenSupply: '',\n        hasWhitelisting: false,\n    };\n    const [inputValue, setInputValue] = useState(emptyStaking);\n\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(prev => {\n        prev[event.target.name] = event.target.value;\n        return prev;\n    });\n    props.createStakingHandler(event.target.value);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <h1> Create Staking</h1>\n\n      <div className={classes.inputDiv}>\n          <div>\n              Staking Token<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.stakeAddress} autoComplete=\"off\" name=\"stakeAddress\" placeholder=\"Address of Token to be staked\" required=\"\" type=\"text\"/><br/>\n\n              Pool Token<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.poolAddress} autoComplete=\"off\" name=\"poolAddress\" placeholder=\"Address of reward Token\" required=\"\" type=\"text\"/><br/>\n\n              Start Time Stamp<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.startBlock} name=\"startBlock\" placeholder=\"Start Time Stamp\" required=\"\" type=\"number\"/><br/>\n\n              Finish Time Stamp<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.finishBlock} name=\"finishBlock\" placeholder=\"Finish Time Stamp\" required=\"\" type=\"number\"/><br/>\n\n              Pool Token Supply<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.poolTokenSupply} name=\"poolTokenSupply\" placeholder=\"Pool Token Supply\" required=\"\" type=\"number\"/><br/>\n\n          </div>\n          <button\n              className={classes.stakeButton}\n              onClick={() => {\n                  props.createStakingPoolHandler(inputValue);\n                  setInputValue(emptyStaking);\n              }}\n          >\n              <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n              <p>Create staking</p>\n          </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateStaking;\n","import React  from 'react';\nimport classes from './Staking.module.css';\n\nconst Info = (props) => {\n\n  return (\n    <div className={classes.Staking}>\n        <div className={classes.totals}>Total Staked (by all users): {props.totalStaked}\n            {/*<div>&nbsp;</div>*/}\n            <h5>All staked amount: {props.allStakedAmount} </h5>\n            <h5>All rewards debt: {props.allRewardDebt} </h5>\n            <h5>All paid rewards: {props.allPaidReward} </h5>\n            <h5>Acc tokens per share: {props.accTokensPerShare} </h5>\n            <h5>Participants: {props.participants} </h5>\n            <h5>Pending reward: {props.pendingReward} </h5>\n            <h5>My stake:{props.myStake}</h5>\n            <h5>Reward per sec:{' '} {props.rewardPerSec}</h5>\n            <h5>Staking start:{' '} {props.startTime}</h5>\n            <h5>Staking end:{' '} {props.finishTime}</h5>\n            <h5>Last reward time:{' '} {props.lastRewardTime}</h5>\n            <h5 className={classes.goMax}>My balance: {props.userBalance}</h5>\n            <h5 className={classes.goMax}> Contract balance: {props.contractBalance}</h5>\n          </div>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\nimport unstakeIcon from '../assets/unstake.png';\nimport icon from '../assets/icon.png';\n\nconst Staking = (props) => {\n  const [inputValue, setInputValue] = useState('');\n  const [currentStakingContract, setCurrentStakingContract] = useState('');\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    props.inputHandler(event.target.value);\n  };\n\n    const setCurrentContractHandler = (event) => {\n        event.preventDefault();\n        setCurrentStakingContract(event.target.value);\n        setCurrentStakingContract(event.target.value);\n    };\n\n  const goMax = () => {\n    setInputValue(props.userBalance);\n    props.inputHandler(props.userBalance);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <img src={icon} alt=\"logo\" className={classes.icon} />\n      <p>{props.account}</p>\n\n        <div className={classes.inputDiv}>\n            <input\n                className={classes.input}\n                onChange={setCurrentContractHandler}\n                value={currentStakingContract}\n                placeholder=\"Enter created staking contract to see details\"\n            ></input>\n            <button\n                className={classes.stakeButton}\n                onClick={() => {props.stakingContractHandler(currentStakingContract)}}\n            >        <p>Choose staking contract</p>\n            </button>\n        </div>\n        <br/><br/>\n\n      <div className={classes.inputDiv}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          onChange={inputChangeHandler}\n          value={inputValue}\n        ></input>\n      </div>\n      <button\n        className={classes.stakeButton}\n        onClick={() => {\n          props.stakeHandler();\n          setInputValue('');\n        }}\n      >\n        <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n        <p>Stake</p>\n      </button>\n      &nbsp; &nbsp;\n      <button className={classes.unstakeButton} onClick={props.unStakeHandler}>\n        <img\n          src={unstakeIcon}\n          alt=\"unstake icon\"\n          className={classes.stakeIcon}\n        />\n        <p>Unstake All</p>\n      </button>\n        <button className={classes.unstakeButton} onClick={props.claimRewardsHandler}>\n            <img\n                src={unstakeIcon}\n                alt=\"unstake icon\"\n                className={classes.stakeIcon}\n            />\n            <p>Claim Rewards</p>\n        </button>\n        &nbsp; &nbsp;\n        <button className={classes.unstakeButton} onClick={props.createStakingPoolHandler}>\n            <img\n                src={unstakeIcon}\n                alt=\"unstake icon\"\n                className={classes.stakeIcon}\n            />\n            <p>Create Pool</p>\n        </button>\n\n    </div>\n  );\n};\n\nexport default Staking;\n","import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport classes from './App.module.css';\nimport TestTokenAbi from '../src/abis/TestToken.json';\nimport TokenStakingAbi from '../src/abis/StakingCreation.json';\nimport StakingAbi from '../src/abis/Staking.json';\nimport CreateStaking from \"./components/CreateStaking\";\nimport Info from \"./components/Info\";\nimport Staking from './components/Staking';\nimport moment from 'moment';\n\nconst App = () => {\n  const [account, setAccount] = useState('Connecting to Metamask..');\n  const [network, setNetwork] = useState({ id: '0', name: 'none' });\n  const [testTokenContract, setTestTokenContract] = useState('');\n  const [stakingCreationContract, setStakingCreationContract] = useState('');\n  const [tokenStakingContract, setTokenStakingContract] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [createStaking, setCreateStaking] = useState({\n    stakeAddress: '',\n    poolAddress: '',\n    startBlock: '',\n    finishBlock: '',\n    poolTokenSupply: '',\n    hasWhitelisting: false,\n  });\n  const [contractBalance, setContractBalance] = useState('0');\n  const [totalStaked, setTotalStaked] = useState(0);\n  const [myReward, setMyReward] = useState(0);\n\n\n  const [allStakedAmount, setAllStakedAmount] = useState(0);\n  const [myStake, setMyStake] = useState(0);\n  const [allRewardDebt, setAllRewardDebt] = useState(0);\n  const [allPaidReward, setAllPaidReward] = useState(0);\n  const [accTokensPerShare, setAccTokensPerShare] = useState(0);\n  const [participants, setParticipants] = useState(0);\n  const [pendingReward, setPendingReward] = useState(0);\n  const [lastRewardTime, setLastRewardTime] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [finishTime, setFinishTime] = useState(0);\n  const [rewardPerSec, setRewardPerSec] = useState(0);\n\n  const [appStatus, setAppStatus] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [userBalance, setUserBalance] = useState('0');\n  const [apy, setApy] = useState(0);\n  const [currentStakingContractAddress, setCurrentStakingContract] = useState('');\n\n  const tokenContractAddress = '0x9f11c83606fe28542f0278797c78cb66488d7eef';\n  const stakingContractAddress = '0x5564F5c9f63B8C69d0D1D188306c96F1CD9E3fFD';\n\n  useEffect(() => {\n    //connecting to ethereum blockchain\n    const ethEnabled = async () => {\n      fetchDataFromBlockchain();\n    };\n\n    ethEnabled();\n  }, []);\n\n  const fetchDataFromBlockchain = async () => {\n    console.log('currentStakingContractAddress');\n    console.log(currentStakingContractAddress);\n    if (window.ethereum) {\n      // await window.ethereum.send('eth_requestAccounts');\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n\n      //connecting to metamask\n      let web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n\n      //loading users network ID and name\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      setNetwork({ ...network, id: networkId, name: networkType });\n\n      //loading TestTokenAbi contract data\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const testToken = new web3.eth.Contract(\n          TestTokenAbi,\n          tokenContractAddress\n        );\n        setTestTokenContract(testToken);\n\n        //  fetching balance of Testtoken and storing in state\n        let testTokenBalance = await testToken.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          testTokenBalance.toString(),\n          'Ether'\n        );\n        setUserBalance(convertedBalance);\n\n        //fetching contract balance\n        //updating total staked balance\n        let totalStaked = await testToken.methods\n          .balanceOf(stakingContractAddress)\n          .call();\n\n        convertedBalance = window.web3.utils.fromWei(\n          totalStaked.toString(),\n          'Ether'\n        );\n        //removing initial balance\n        setContractBalance(convertedBalance);\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TestToken contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const stakingCreationC = new web3.eth.Contract(\n          TokenStakingAbi,\n          stakingContractAddress,\n        );\n        setStakingCreationContract(stakingCreationC);\n\n        if (currentStakingContractAddress) {\n          const stakingContract = new web3.eth.Contract(\n              StakingAbi,\n              currentStakingContractAddress,\n          );\n          console.log(currentStakingContractAddress);\n          setTokenStakingContract(stakingContract);\n\n          let [\n            allRewardDebt,\n            allPaidReward,\n            accTokensPerShare,\n            participants,\n            pendingReward,\n            lastRewardTime,\n            rewardPerSec,\n            startTime,\n            finishTime,\n            allStakedAmount,\n          ] = await Promise.all([\n            stakingContract.methods.allRewardDebt().call(),\n            stakingContract.methods.allPaidReward().call(),\n            stakingContract.methods.accTokensPerShare().call(),\n            stakingContract.methods.participants().call(),\n            stakingContract.methods.pendingReward(accounts[0]).call(),\n            stakingContract.methods.lastRewardTime().call(),\n            stakingContract.methods.rewardPerSec().call(),\n            stakingContract.methods.startTime().call(),\n            stakingContract.methods.finishTime().call(),\n            stakingContract.methods.allStakedAmount().call(),\n          ])\n\n          console.log({\n            allRewardDebt,\n            allPaidReward,\n            accTokensPerShare,\n            participants,\n            pendingReward,\n            lastRewardTime,\n            rewardPerSec,\n            startTime,\n            finishTime,\n            allStakedAmount,\n          });\n\n          allRewardDebt = window.web3.utils.fromWei(allRewardDebt.toString(), 'Ether');\n          allPaidReward = window.web3.utils.fromWei(allPaidReward.toString(), 'Ether');\n          accTokensPerShare = window.web3.utils.fromWei(accTokensPerShare.toString(), 'Ether');\n          pendingReward = window.web3.utils.fromWei(pendingReward.toString(), 'Ether');\n          rewardPerSec = window.web3.utils.fromWei(rewardPerSec.toString(), 'Ether');\n          allStakedAmount = allStakedAmount ? window.web3.utils.fromWei(allStakedAmount.toString(), 'Ether') : 0;\n          startTime = moment.unix(startTime).format(\"YYYY-MM-DD HH:mm\");\n          finishTime =  moment.unix(finishTime).format(\"YYYY-MM-DD HH:mm\");\n          lastRewardTime =  moment.unix(lastRewardTime).format(\"YYYY-MM-DD HH:mm\");\n\n          setAllRewardDebt(allRewardDebt);\n          setAllPaidReward(allPaidReward);\n          setAccTokensPerShare(accTokensPerShare);\n          setPendingReward(pendingReward);\n          setRewardPerSec(rewardPerSec);\n          setAllStakedAmount(allStakedAmount);\n          setStartTime(startTime);\n          setFinishTime(finishTime);\n          setLastRewardTime(lastRewardTime);\n          setParticipants(participants);\n        } else {\n          console.log('exited');\n        }\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'Staking contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      //removing loader\n      setLoader(false);\n    } else if (!window.web3) {\n      setAppStatus(false);\n      setAccount('Metamask is not detected');\n      setLoader(false);\n    }\n  };\n\n  const inputHandler = (received) => {\n    setInputValue(received);\n  };\n\n  const createStakingHandler = (received) => {\n    setCreateStaking(received);\n  };\n\n  const stakingContractHandler = (contract) => {\n    setCurrentStakingContract(contract);\n    console.log(contract);\n    fetchDataFromBlockchain();\n  };\n\n  const stakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether');\n\n        //aproving tokens for spending\n        testTokenContract.methods\n          .approve(currentStakingContractAddress, convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            tokenStakingContract.methods\n              .stakeTokens(convertToWei)\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n          })\n          .on('error', function(error) {\n            setLoader(false);\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const unStakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      tokenStakingContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.message);\n          setLoader(false);\n        });\n\n      setInputValue('');\n    }\n  };\n\n  const claimRewardsHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      tokenStakingContract.methods\n          .claimRewards()\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n\n      setInputValue('');\n    }\n  };\n\n  const createStakingPoolHandler = (stakingObject) => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      let convertedToWei = window.web3.utils.toWei(stakingObject.poolTokenSupply, 'Ether');\n\n      //aproving tokens for spending\n      testTokenContract.methods\n        .approve(stakingContractAddress, convertedToWei)\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          stakingCreationContract.methods.createStakingPool(\n                stakingObject.stakeAddress,\n                stakingObject.poolAddress,\n                stakingObject.startBlock,\n                stakingObject.finishBlock,\n                convertedToWei,\n                stakingObject.hasWhitelisting,\n              )\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n        })\n        .on('error', function(error) {\n          setLoader(false);\n          console.log('Error Code:', error.code);\n          console.log(error.message);\n        });\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className={classes.Grid}>\n      {loader ? <div className={classes.curtain}></div> : null}\n      <div className={classes.Child1}>\n        <div>\n          <CreateStaking\n            createStakingHandler={createStakingHandler}\n            createStakingPoolHandler={createStakingPoolHandler}\n          />\n        </div>\n      </div>\n      <div className={classes.Child2}>\n        <div className={classes.childHeight}>\n          <Staking\n              account={account}\n              totalStaked={totalStaked}\n              contractBalance={contractBalance}\n              myReward={myReward}\n              userBalance={userBalance}\n              unStakeHandler={unStakeHandler}\n              stakeHandler={stakeHandler}\n              inputHandler={inputHandler}\n              stakingContractHandler={stakingContractHandler}\n              claimRewardsHandler={claimRewardsHandler}\n              apy={apy}\n          />\n        </div>\n      </div>\n      <div className={classes.Child3}>\n        <div>\n          <Info\n              account={account}\n              totalStaked={totalStaked}\n              contractBalance={contractBalance}\n\n              myStake={myStake}\n              allRewardDebt={allRewardDebt}\n              allPaidReward={allPaidReward}\n              accTokensPerShare={accTokensPerShare}\n              participants={participants}\n              pendingReward={pendingReward}\n              lastRewardTime={lastRewardTime}\n              startTime={startTime}\n              finishTime={finishTime}\n              rewardPerSec={rewardPerSec}\n              allStakedAmount={allStakedAmount}\n              myReward={myReward}\n              userBalance={userBalance}\n              apy={apy}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/stake.e8708439.png\";","module.exports = __webpack_public_path__ + \"static/media/unstake.cebdc53d.png\";"],"sourceRoot":""}