{"version":3,"sources":["WithdrawPopup.js","StakePopup.js","Stake.js","Main.js","Navbar.js","App.js","index.js"],"names":["WithdrawPopup","props","handleClose","event","setState","show","state","withdrawAmount","Button","className","onClick","preventDefault","Modal","this","Header","style","display","justifyContent","alignItems","Body","id","marginTop","type","min","onChange","input","value","toString","ref","placeholder","Footer","variant","console","log","stakingcontractdata","withdraw","window","web3","utils","toWei","Component","StakePopup","stakeAmount","stake","Stake","button","isStakeTokenApproved","claim","approve","allStakedAmount","stakeTokenBalance","myStake","pendingReward","weeklyEstimate","finishTime","Main","staking","StakeBgColor","WithdrawBgColor","content","ethBalance","LPTokenBalance","StakingContract","allRewardDebt","allPaidReward","accTokensPerShare","startTime","lastRewardTime","Navbar","target","rel","color","account","width","height","src","Identicon","alt","App","staketoken","methods","StakingContractAddress","approveAmount","send","from","on","hash","confirmationNumber","alert","AmountStaked","withdrawStake","loadBlockchainData","loading","AmountToBeWithdrawn","receipt","error","rewardtoken","RewardTokenBalance","a","loadWeb3","StakeToken","networks","networkID","StakeTokenAddress","address","eth","Contract","abi","Promise","all","balanceOf","call","allowance","stakingContract","fromWei","RewardToken","RewardTokenAddress","getUserInfo","rewardPerSec","moment","unix","format","toBN","muln","ethereum","Web3","enable","getAccounts","accounts","getBalance","net","getId","currentProvider","role","maxWidth","arialLabel","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.11c958e6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Main.js';\nimport {Button, Modal} from \"react-bootstrap\";\n\n\n\nclass WithdrawPopup extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      withdrawAmount: '0',\n      show: false,\n    }\n  }\n\n  handleClose = (event) => {\n    this.setState({ show: false })\n  }\n\n  render() {\n\n    return (\n      <>\n        <Button className=\"btn btn-lg center-block claimAndWithdrawBtn\" onClick={(event) => {\n          event.preventDefault()\n          this.setState({ show: true })\n        }}>\n          Withdraw\n        </Button>\n\n        <Modal show={this.state.show}>\n          <Modal.Header>\n            <h4 style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}>Withdrawal</h4>\n            <br/>\n            <span >Enter amount to complete your withdrawal</span>\n          </Modal.Header>\n          <Modal.Body>\n\n            <div>\n              <span id=\"emailHelp\" className=\"form-text text-muted\">\n                Amount\n              </span>\n              <div className=\"form-group\" style={{ marginTop: 0 }}>\n                <input type=\"number\" min='0' className=\"form-control\" aria-describedby=\"emailHelp\" onChange={(event) => {\n                  const withdrawAmount = this.input.value.toString()\n                  this.setState({ withdrawAmount: withdrawAmount })\n                }}\n                       ref={(input) => { this.input = input }} placeholder={this.state.withdrawAmount.toString()}\n                />\n\n              </div>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" className=\"claimAndWithdrawBtn\" onClick={this.handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" className=\"claimAndWithdrawBtn\" onClick={(event) => {\n              event.preventDefault()\n              console.log(this.props.stakingcontractdata);\n              if (this.props.stakingcontractdata === true) {\n                this.props.withdraw(window.web3.utils.toWei(this.state.withdrawAmount, 'Ether'));\n                this.handleClose(event);\n              }\n            }}>\n              Confirm\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default WithdrawPopup;\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Main.js';\nimport {Button, Modal} from \"react-bootstrap\";\n\nclass StakePopup extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      stakeAmount: '0',\n      show: false,\n    }\n  }\n\n  handleClose = (event) => {\n    this.setState({ show: false })\n  }\n\n  render() {\n\n    return (\n      <>\n        <Button className=\"btn btn-warning btn-sm claimAndWithdrawBtn\" onClick={(event) => {\n          event.preventDefault()\n          this.setState({ show: true })\n        }}>\n          Stake\n        </Button>\n\n        <Modal show={this.state.show}>\n          <Modal.Header>\n            <h4 style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}>Stake</h4>\n            <br/>\n            <span >Enter amount to complete your staking</span>\n          </Modal.Header>\n          <Modal.Body>\n\n            <div>\n              <span id=\"emailHelp\" className=\"form-text text-muted\">\n                Amount\n              </span>\n              <div className=\"form-group\" style={{ marginTop: 0 }}>\n                <input type=\"number\" min='0' className=\"form-control\" aria-describedby=\"emailHelp\" onChange={(event) => {\n                  const stakeAmount = this.input.value.toString()\n                  this.setState({ stakeAmount: stakeAmount })\n                }}\n                       ref={(input) => { this.input = input }} placeholder={this.state.stakeAmount.toString()}\n                />\n\n              </div>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" className=\"claimAndWithdrawBtn\" onClick={this.handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" className=\"claimAndWithdrawBtn\" onClick={(event) => {\n              event.preventDefault()\n              if (this.props.stakingcontractdata === true) {\n                this.props.stake(window.web3.utils.toWei(this.state.stakeAmount, 'Ether'));\n                this.handleClose(event);\n              }\n            }}>\n              Confirm\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default StakePopup;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Main.js';\nimport {Button } from \"react-bootstrap\";\nimport WithdrawPopup from \"./WithdrawPopup\";\nimport StakePopup from \"./StakePopup\";\n\n\n\nclass Stake extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      stakeAmount: '0'\n    }\n  }\n\n\n  render() {\n\n    let button;\n    if (!this.props.isStakeTokenApproved) {\n      button =\n        <div>\n          <Button type=\"submit\" className=\"stakenow-btn btn-lg\" onClick={(event) => {\n            event.preventDefault()\n            if (this.props.stakingcontractdata === true) {\n              this.props.approve()\n            }\n          }}> Approve </Button>\n        </div>\n    } else {\n      button = <div>\n        <Button type=\"submit\" className=\"btn btn-lg center-block claimAndWithdrawBtn\" onClick={(event) => {\n          event.preventDefault()\n\n          if (this.props.stakingcontractdata === true) {\n            this.props.claim()\n          }\n        }}> Claim </Button>\n\n        <WithdrawPopup\n          stakingcontractdata = {this.props.stakingcontractdata}\n          withdraw={this.props.withdraw}\n        />\n      </div>\n    }\n\n    return (\n\n      <div className=\"table-responsive\">\n        <div className='tokenNameDiv'>\n\n          <table className='table table-borderless table-sm'>\n            <tbody>\n              <tr>\n                <td> <h3> Token Name</h3></td>\n                <td className='token-heading-btn'>\n                  <StakePopup\n                    stakingcontractdata = {this.props.stakingcontractdata}\n                    stake={this.props.stake}\n                  />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <table className='table table-borderless table-sm'>\n          <tbody>\n            <tr>\n              <td className='token-declaration-text'> Total Staked </td>\n              <td className='infoTableValue'> {this.props.allStakedAmount} STK </td>\n            </tr>\n            <tr>\n              <td className='token-declaration-text'> APR </td>\n              {/*TODO: change to correct APR*/}\n              <td className='infoTableValue'> 10% </td>\n            </tr>\n            <tr>\n              <td className='token-declaration-text'> My Wallet </td>\n              <td className='infoTableValue'> {this.props.stakeTokenBalance} STK </td>\n            </tr>\n            <tr>\n              <td className='token-declaration-text'> My Stake </td>\n              <td className='infoTableValue'> {this.props.myStake} STK </td>\n            </tr>\n            <tr>\n              <td className='token-declaration-text'> My Rewards </td>\n              <td className='infoTableValue'> {this.props.pendingReward} STK </td>\n            </tr>\n            <tr>\n              <td className='token-declaration-text'> Weekly Estimate </td>\n              {/*TODO: change to correct Estimate*/}\n              <td className='infoTableValue'> {this.props.weeklyEstimate} STK </td>\n            </tr>\n            <tr>\n              <td className='token-declaration-text'> Pool End Date (UTC) </td>\n              <td className='infoTableValue'> { this.props.finishTime } </td>\n            </tr>\n          </tbody>\n        </table>\n\n        { button }\n\n      </div>\n\n    );\n  }\n}\n\nexport default Stake;\n","import './App.css';\nimport { MutatingDots } from \"react-loader-spinner\";\nimport Stake from './Stake.js';\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            staking: 'true',\n            StakeBgColor: '',\n            WithdrawBgColor: ''\n        }\n    }\n\n\n    render() {\n        let content\n        if (this.state.staking === 'true') {\n            content = <Stake\n                ethBalance={this.props.ethBalance}\n                stakeTokenBalance={this.props.stakeTokenBalance}\n                stake={this.props.stake}\n                withdraw={this.props.withdraw}\n                staking={this.props.staking}\n                approve={this.props.approve}\n                claim={this.props.claim}\n                LPTokenBalance = {this.props.LPTokenBalance}\n                StakingContract =  {this.props.StakingContract}\n                stakingcontractdata = {this.props.stakingcontractdata}\n                isStakeTokenApproved = {this.props.isStakeTokenApproved}\n\n                myStake={this.props.myStake}\n                allRewardDebt={this.props.allRewardDebt}\n                allPaidReward={this.props.allPaidReward}\n                accTokensPerShare={this.props.accTokensPerShare}\n                pendingReward={this.props.pendingReward}\n                weeklyEstimate={this.props.weeklyEstimate}\n                allStakedAmount={this.props.allStakedAmount}\n                startTime={this.props.startTime}\n                finishTime={this.props.finishTime}\n                lastRewardTime={this.props.lastRewardTime}\n            />\n        } else {\n            // content = <Withdraw\n            //     ethBalance={this.props.ethBalance}\n            //     stakeTokenBalance={this.props.stakeTokenBalance}\n            //     withdraw = {this.props.withdraw}\n            //     staking={this.props.staking}\n            //     RewardTokenBalance = {this.props.RewardTokenBalance}\n            //     LPTokenBalance = {this.props.LPTokenBalance}\n            //     StakingContract =  {this.props.StakingContract}\n            //     stakingcontractdata = {this.props.stakingcontractdata}\n            //\n            // />\n        }\n \n        return (\n            <div className=' card border border-dark rounded-lg shadow-lg p-3 mb-5 bg-white rounded card-props'>\n                <div className='card-body'>\n                        {/*<button className=\" stake-stake-btn btn-lg\" onClick={(event) => { this.setState({ staking: 'true', StakeBgColor: 'lightgrey', WithdrawBgColor: 'white' }) }} style={{ backgroundColor: this.state.StakeBgColor }} >*/}\n                        {/* <h6 style = {{fontSize: '1.8vw'}}> STAKE </h6>*/}\n                        {/*</button>*/}\n                        {/*<button type=\"submit\" className=\" stake-withdraw-btn btn-lg\" onClick={(event) => { this.setState({ staking: 'false', StakeBgColor: 'white', WithdrawBgColor: 'lightgrey' }) }} style={{ backgroundColor: this.state.withdrawBgColor }}>*/}\n                        {/*    <h6 style = {{fontSize: '1.8vw'}} >WITHDRAW</h6>*/}\n                        {/*</button>*/}\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React, { Component } from 'react'\nimport Identicon from 'identicon.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className = \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a  \n        className = 'navbar-brand col-sm-3 col-md-2 mr-0'\n        target = 'blank'\n        rel = 'noopener noreferrer'\n        >\n          Staking Dapp\n        </a>\n\n        <ul className='nav-bar-nav px-3'>\n          <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n            <small className= 'text-secondary'>\n              <small id =\"account\" style = {{color: \"white\"}}> {this.props.account} </small>\n            </small>\n            \n            { this.props.account\n              ? <img\n                className=\"ml-2\"\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n                alt=\"\"\n              />\n              : <span></span>\n            }\n\n          </li>\n        </ul>\n        \n      </nav> \n    );\n  }\n}\n\nexport default Navbar;\n","import './App.css';\nimport { MutatingDots } from \"react-loader-spinner\";\nimport Main from './Main.js'\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport stakingContract from './abis/stakingContract.json';\nimport Navbar from './Navbar.js';\nimport StakeToken from './abis/StakeToken.json';\nimport RewardToken from './abis/RewardToken.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport moment from 'moment';\n\nclass App extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n\n    // load stake token and stake token bal of connected address\n    const StakeTokenData = StakeToken.networks[this.state.networkID]\n    if (StakeTokenData) {\n      const StakeTokenAddress = StakeToken.networks[this.state.networkID].address\n      const staketoken = new web3.eth.Contract(StakeToken.abi, StakeTokenAddress)\n      this.setState({ staketoken })\n\n      let [\n        stakeTokenBalance,\n        allowance,\n      ] = await Promise.all([\n        staketoken.methods.balanceOf(this.state.account).call(),\n        staketoken.methods.allowance(this.state.account, stakingContract.networks[this.state.networkID].address).call(),\n      ])\n\n      this.setState({\n        stakeTokenBalance: window.web3.utils.fromWei(stakeTokenBalance.toString(), 'Ether'),\n        isStakeTokenApproved: allowance === this.state.approveAmount,\n      })\n\n    } else {\n      window.alert('token to be staked not on this blockchain network, switch to ropsten')\n    }\n\n    // load stake token and stake token bal of connected address\n    const RewardTokenData = RewardToken.networks[this.state.networkID]\n    if (RewardTokenData) {\n      const RewardTokenAddress = RewardToken.networks[this.state.networkID].address\n\n      const rewardtoken = new web3.eth.Contract(RewardToken.abi, RewardTokenAddress)\n      this.setState({ rewardtoken: rewardtoken })\n\n      let RewardTokenBalance = await rewardtoken.methods.balanceOf(this.state.account).call()\n\n      this.setState({\n        RewardTokenBalance: RewardTokenBalance.toString()\n      })\n\n    } else {}\n\n\n    // load staking contract \n    const StakingContractData = stakingContract.networks[this.state.networkID]\n    if (StakingContractData) {\n      this.setState({ stakingcontractdata: true })\n      const StakingContractAddress = stakingContract.networks[this.state.networkID].address\n      this.setState({ StakingContractAddress: StakingContractAddress })\n\n      const StakingContract = new web3.eth.Contract(stakingContract.abi, StakingContractAddress)\n\n      let [\n        myStake,\n        allRewardDebt,\n        allPaidReward,\n        accTokensPerShare,\n        pendingReward,\n        lastRewardTime,\n        rewardPerSec,\n        startTime,\n        finishTime,\n        allStakedAmount,\n      ] = await Promise.all([\n        StakingContract.methods.getUserInfo(this.state.account).call(),\n        StakingContract.methods.allRewardDebt().call(),\n        StakingContract.methods.allPaidReward().call(),\n        StakingContract.methods.accTokensPerShare().call(),\n        StakingContract.methods.pendingReward(this.state.account).call(),\n        StakingContract.methods.lastRewardTime().call(),\n        StakingContract.methods.rewardPerSec().call(),\n        StakingContract.methods.startTime().call(),\n        StakingContract.methods.finishTime().call(),\n        StakingContract.methods.allStakedAmount().call(),\n      ])\n\n      myStake = window.web3.utils.fromWei(myStake[0].toString(), 'Ether');\n      allRewardDebt = window.web3.utils.fromWei(allRewardDebt.toString(), 'Ether');\n      allPaidReward = window.web3.utils.fromWei(allPaidReward.toString(), 'Ether');\n      accTokensPerShare = window.web3.utils.fromWei(accTokensPerShare.toString(), 'Ether');\n      pendingReward = window.web3.utils.fromWei(pendingReward.toString(), 'Ether');\n      // rewardPerSec = window.web3.utils.fromWei(rewardPerSec.toString(), 'Ether');\n      allStakedAmount = allStakedAmount ? window.web3.utils.fromWei(allStakedAmount.toString(), 'Ether') : 0;\n      startTime = moment.unix(startTime).format(\"YYYY-MM-DD HH:mm\");\n      finishTime =  moment.unix(finishTime).format(\"YYYY-MM-DD HH:mm\");\n      lastRewardTime =  moment.unix(lastRewardTime).format(\"YYYY-MM-DD HH:mm\");\n      let weeklyEstimate = window.web3.utils.fromWei(\n        window.web3.utils.toBN(rewardPerSec).muln(60 * 60 * 24 * 7),\n        'Ether',\n      )\n\n      this.setState({\n        StakingContract,\n        myStake,\n        allRewardDebt,\n        allPaidReward,\n        accTokensPerShare,\n        pendingReward,\n        weeklyEstimate,\n        allStakedAmount,\n        startTime,\n        finishTime,\n        lastRewardTime,\n      })\n\n    } else {\n      this.setState({ stakingcontractdata: false })\n      window.alert('staking contract not live on this blockchain, please switch to ropsten')\n    }\n\n    this.setState({ loading: false })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n      const web3 = window.web3\n\n      const accounts = await web3.eth.getAccounts()\n      this.setState({ account: accounts[0] })\n\n      const ethBalance = await web3.eth.getBalance(this.state.account)\n      this.setState({ ethBalance: ethBalance })\n\n      const networkID = await web3.eth.net.getId()\n      console.log(networkID)\n      this.setState({networkID: networkID})\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      const web3 = window.web3\n\n      const accounts = await web3.eth.getAccounts()\n      this.setState({ account: accounts[0] })\n  \n      const ethBalance = await web3.eth.getBalance(this.state.account)\n      this.setState({ ethBalance: ethBalance })\n\n      const networkID = await web3.eth.net.getId()\n      console.log(networkID)\n      this.setState({networkID: networkID})\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. Please install metamask chrome extension and refresh page')\n    }\n  }\n\n  approve = () => {\n    if (this.state.stakingcontractdata === true) {\n      this.state.staketoken.methods\n        // make it +/- max approve so its needed only once\n        .approve(this.state.StakingContractAddress, this.state.approveAmount)\n        .send({ from: this.state.account })\n        .on('transactionHash', (hash) => {})\n        .on('confirmation',(confirmationNumber) => {\n          this.setState({ isStakeTokenApproved: true })\n        })\n    } else { window.alert('staking contract not live on this blockchain') }\n  }\n\n  stake = (AmountStaked) => {\n    if (this.state.stakingcontractdata === true) {\n\n      if (this.state.isStakeTokenApproved) {\n        this.state.StakingContract.methods.withdrawStake(AmountStaked).send({ from: this.state.account }).on('transactionHash', (hash) => {\n          this.loadBlockchainData()\n          this.setState({ loading: false })\n        })\n      } else { window.alert('staking contract has no enough access to the owners token') }\n\n    } else { window.alert('staking contract not live on this blockchain') }\n  }\n\n  withdraw = (AmountToBeWithdrawn) => {\n    if (this.state.stakingcontractdata === true) {\n      this.state.StakingContract.methods\n        .withdrawStake(AmountToBeWithdrawn)\n        .send({ from: this.state.account })\n        .on('transactionHash', (hash) => {\n          this.setState({ loading: false })\n        })\n        .on('receipt', (receipt) => {\n          this.setState({ loading: false })\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          this.loadBlockchainData()\n          this.setState({ loading: false })\n        })\n        .on('error', function(error) {\n          this.setState({ loading: false })\n        });\n    } else {\n      window.alert('staking contract not live on this blockchain')\n    }\n  }\n\n  claim = () => {\n    this.setState({ loading: true })\n    if (this.state.stakingcontractdata === true) {\n      this.state.StakingContract.methods\n        .withdrawStake(0)\n        .send({ from: this.state.account })\n        .on('transactionHash', (hash) => {\n          this.setState({ loading: false })\n        })\n        .on('receipt', (receipt) => {\n          this.setState({ loading: false })\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          this.loadBlockchainData()\n          this.setState({ loading: false })\n        })\n        .on('error', function(error) {\n          this.setState({ loading: false })\n        });\n    } else {\n      window.alert('staking contract not live on this blockchain')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      approveAmount: '115792089237316195423570985008687907853269984665640564039457584007913129639935',\n      account: '',\n      ethBalance: '0',\n      StakingContract: {},\n      stakeTokenBalance: '0',\n      loading: true,\n      staketoken: {},\n      staking: 'true',\n      rewardtoken: {},\n      RewardTokenBalance: '0',\n      StakingContractAddress: '',\n      stakingcontractdata: true,\n      isStakeTokenApproved: false,\n\n      myStake: '0',\n      allRewardDebt: '0',\n      allPaidReward: '0',\n      accTokensPerShare: '0',\n      pendingReward: '0',\n      weeklyEstimate: '0',\n      allStakedAmount: '0',\n      startTime: '',\n      finishTime: '',\n      lastRewardTime: '',\n    }\n  }\n\n  render() {\n    let content\n\n    content = <Main\n      ethBalance={this.state.ethBalance}\n      stakeTokenBalance={this.state.stakeTokenBalance}\n      staking={this.state.staking}\n      stake={this.stake}\n      withdraw={this.withdraw}\n      claim={this.claim}\n      approve={this.approve}\n      RewardTokenBalance={this.state.RewardTokenBalance}\n      StakingContract={this.state.StakingContract}\n      stakingcontractdata={this.state.stakingcontractdata}\n      isStakeTokenApproved={this.state.isStakeTokenApproved}\n      loading={this.state.loading}\n\n\n      myStake={this.state.myStake}\n      allRewardDebt={this.state.allRewardDebt}\n      allPaidReward={this.state.allPaidReward}\n      accTokensPerShare={this.state.accTokensPerShare}\n      pendingReward={this.state.pendingReward}\n      weeklyEstimate={this.state.weeklyEstimate}\n      allStakedAmount={this.state.allStakedAmount}\n      startTime={this.state.startTime}\n      finishTime={this.state.finishTime}\n      lastRewardTime={this.state.lastRewardTime}\n    />\n\n\n    return (\n      <div className = 'secondDiv'>\n        <div className=\"App secondDiv\" >\n          <Navbar account={this.state.account} />\n          <header className=\"App-header\">\n            <main role='main' className='col-lg-12 d-flex ml-auto mr-auto' style={{ maxWidth: '600px' }}></main>\n            <a\n              className=\"App-link\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n            </a>\n            <div className='loaderTop'>{this.state.loading ? <MutatingDots arialLabel=\"loading-indicator\" width=\"100px\" /> : null}</div>\n            {content}\n          </header>\n          \n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}