{"version":3,"sources":["assets/unstake.png","assets/icon.png","App.module.css","components/CreateStaking.js","components/Info.js","components/Staking.js","App.js","index.js","assets/stake.png","components/Staking.module.css"],"names":["module","exports","__webpack_require__","p","Grid","ChildLoader","Child1","Child2","Child3","childHeight","CreateStaking","props","_useState","useState","stakeAddress","poolAddress","startBlock","finishBlock","poolTokenSupply","hasWhitelisting","_useState2","Object","slicedToArray","inputValue","setInputValue","inputChangeHandler","event","preventDefault","objectSpread","defineProperty","target","name","value","react_default","a","createElement","className","classes","Staking","inputDiv","input","onChange","autoComplete","placeholder","required","type","stakeButton","onClick","createStakingPoolHandler","src","stakeIcon","alt","Info","totals","totalStaked","allStakedAmount","allRewardDebt","allPaidReward","accTokensPerShare","participants","pendingReward","myStake","rewardPerSec","startTime","finishTime","lastRewardTime","goMax","userBalance","_useState3","_useState4","currentStakingContract","setCurrentStakingContract","icon","account","stakingContractHandler","min","step","inputHandler","stakeHandler","unstakeButton","unStakeHandler","unstakeIcon","reinvestRewardsHandler","App","setAccount","id","network","setNetwork","_useState5","_useState6","testTokenContract","setTestTokenContract","_useState7","_useState8","stakingCreationContract","setStakingCreationContract","_useState9","_useState10","tokenStakingContract","setTokenStakingContract","_useState11","_useState12","_useState13","_useState14","setAllStakedAmount","_useState15","_useState16","setMyStake","_useState17","_useState18","setAllRewardDebt","_useState19","_useState20","setAllPaidReward","_useState21","_useState22","setAccTokensPerShare","_useState23","_useState24","setParticipants","_useState25","_useState26","setPendingReward","_useState27","_useState28","setLastRewardTime","_useState29","_useState30","setStartTime","_useState31","_useState32","setFinishTime","_useState33","_useState34","setRewardPerSec","_useState35","_useState36","appStatus","setAppStatus","_useState37","_useState38","loader","setLoader","_useState39","_useState40","setUserBalance","_useState41","_useState42","currentStakingContractAddress","useEffect","fetchDataFromBlockchain","_ref","asyncToGenerator","regenerator_default","mark","_callee","web3","accounts","networkId","networkType","_web","testToken","testTokenBalance","convertedBalance","_web2","stakingCreationC","stakingContract","_yield$Promise$all","_yield$Promise$all2","_myStake","_allRewardDebt","_allPaidReward","_accTokensPerShare","_participants","_pendingReward","_lastRewardTime","_rewardPerSec","_startTime","_finishTime","_allStakedAmount","wrap","_context","prev","next","console","log","window","ethereum","request","method","Web3","eth","getAccounts","sent","net","getId","getNetworkType","Contract","TestTokenAbi","methods","balanceOf","call","utils","fromWei","toString","alert","TokenStakingAbi","StakingAbi","Promise","all","getUserInfo","moment","unix","format","stop","apply","this","arguments","dist","arialLabel","width","components_CreateStaking","stakingObject","convertedToWei","toWei","approve","send","from","on","hash","createStakingPool","receipt","confirmationNumber","error","code","message","components_Staking","convertToWei","withdrawStake","stakeTokens","received","contract","claimRewardsHandler","reinvestTokens","components_Info","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d3c8634a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unstake.cebdc53d.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.6b47307e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"App_Grid__38lLN\",\"ChildLoader\":\"App_ChildLoader__2fgje\",\"Child1\":\"App_Child1__3ld-d\",\"Child2\":\"App_Child2__3F3CH\",\"Child3\":\"App_Child3__36NvU\",\"childHeight\":\"App_childHeight__2uja6\"};","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\n\nconst CreateStaking = (props) => {\n    const emptyStaking = {\n        stakeAddress: '',\n        poolAddress: '',\n        startBlock: '',\n        finishBlock: '',\n        poolTokenSupply: '',\n        hasWhitelisting: false,\n    };\n    const [inputValue, setInputValue] = useState(emptyStaking);\n\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue({\n        ...inputValue,\n        [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <div className={classes.Staking}>\n      <h1> Create Staking</h1>\n\n      <div className={classes.inputDiv}>\n          <div>\n              Staking Token<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.stakeAddress} autoComplete=\"off\" name=\"stakeAddress\" placeholder=\"Address of Token to be staked\" required=\"\" type=\"text\"/><br/>\n\n              Pool Token<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.poolAddress} autoComplete=\"off\" name=\"poolAddress\" placeholder=\"Address of reward Token\" required=\"\" type=\"text\"/><br/>\n\n              Start Time Stamp<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.startBlock} name=\"startBlock\" placeholder=\"Start Time Stamp\" required=\"\" type=\"number\"/><br/>\n\n              Finish Time Stamp<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.finishBlock} name=\"finishBlock\" placeholder=\"Finish Time Stamp\" required=\"\" type=\"number\"/><br/>\n\n              Pool Token Supply<br/>\n              <input className={classes.input} onChange={inputChangeHandler} value={inputValue.poolTokenSupply} name=\"poolTokenSupply\" placeholder=\"Pool Token Supply\" required=\"\" type=\"number\"/><br/>\n\n          </div>\n          <button\n              className={classes.stakeButton}\n              onClick={() => {\n                  props.createStakingPoolHandler(inputValue);\n              }}\n          >\n              <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n              <p>Create staking</p>\n          </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateStaking;\n","import React  from 'react';\nimport classes from './Staking.module.css';\n\nconst Info = (props) => {\n\n  return (\n    <div className={classes.Staking}>\n        <div className={classes.totals}>Total Staked (by all users): {props.totalStaked}\n            {/*<div>&nbsp;</div>*/}\n            <h5>All staked amount: {props.allStakedAmount} </h5>\n            <h5>All rewards debt: {props.allRewardDebt} </h5>\n            <h5>All paid rewards: {props.allPaidReward} </h5>\n            <h5>Acc tokens per share: {props.accTokensPerShare} </h5>\n            <h5>Participants: {props.participants} </h5>\n            <h5>Pending reward: {props.pendingReward} </h5>\n            <h5>My stake:{props.myStake}</h5>\n            <h5>Reward per sec:{' '} {props.rewardPerSec}</h5>\n            <h5>Staking start:{' '} {props.startTime}</h5>\n            <h5>Staking end:{' '} {props.finishTime}</h5>\n            <h5>Last reward time:{' '} {props.lastRewardTime}</h5>\n            <h5 className={classes.goMax}>My balance: {props.userBalance}</h5>\n          </div>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\nimport unstakeIcon from '../assets/unstake.png';\nimport icon from '../assets/icon.png';\n\nconst Staking = (props) => {\n  const [inputValue, setInputValue] = useState('');\n  const [currentStakingContract, setCurrentStakingContract] = useState('');\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    props.inputHandler(event.target.value);\n  };\n\n    const setCurrentContractHandler = (event) => {\n        event.preventDefault();\n        setCurrentStakingContract(event.target.value);\n    };\n\n  return (\n    <div className={classes.Staking}>\n      <img src={icon} alt=\"logo\" className={classes.icon} />\n      <p>{props.account}</p>\n\n        <div className={classes.inputDiv}>\n            <input\n                className={classes.input}\n                onChange={setCurrentContractHandler}\n                value={currentStakingContract}\n                placeholder=\"Enter created staking contract to see details\"\n            ></input>\n            <button\n                className={classes.stakeButton}\n                onClick={() => {props.stakingContractHandler(currentStakingContract)}}\n            >        <p>Choose staking contract</p>\n            </button>\n        </div>\n        <br/><br/>\n\n      <div className={classes.inputDiv}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          onChange={inputChangeHandler}\n          value={inputValue}\n        ></input>\n      </div>\n      <button\n        className={classes.stakeButton}\n        onClick={() => {\n          props.stakeHandler();\n          setInputValue('');\n        }}\n      >\n        <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n        <p>Stake</p>\n      </button>\n      &nbsp; &nbsp;\n      <button className={classes.unstakeButton} onClick={props.unStakeHandler}>\n        <img\n          src={unstakeIcon}\n          alt=\"unstake icon\"\n          className={classes.stakeIcon}\n        />\n        <p>Unstake (auto-harvest)</p>\n      </button>\n        &nbsp; &nbsp;\n        <button className={classes.unstakeButton} onClick={props.reinvestRewardsHandler}>\n            <img\n                src={unstakeIcon}\n                alt=\"unstake icon\"\n                className={classes.stakeIcon}\n            />\n            <p>Reinvest</p>\n        </button>\n\n    </div>\n  );\n};\n\nexport default Staking;\n","import React, { useState, useEffect } from 'react';\nimport { MutatingDots } from \"react-loader-spinner\";\nimport Web3 from 'web3';\nimport classes from './App.module.css';\nimport TestTokenAbi from '../src/abis/TestToken.json';\nimport TokenStakingAbi from '../src/abis/StakingCreation.json';\nimport StakingAbi from '../src/abis/Staking.json';\nimport CreateStaking from \"./components/CreateStaking\";\nimport Info from \"./components/Info\";\nimport Staking from './components/Staking';\nimport moment from 'moment';\n\nconst App = () => {\n  const [account, setAccount] = useState('Connecting to Metamask..');\n  const [network, setNetwork] = useState({ id: '0', name: 'none' });\n  const [testTokenContract, setTestTokenContract] = useState('');\n  const [stakingCreationContract, setStakingCreationContract] = useState('');\n  const [tokenStakingContract, setTokenStakingContract] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [allStakedAmount, setAllStakedAmount] = useState(0);\n  const [myStake, setMyStake] = useState(0);\n  const [allRewardDebt, setAllRewardDebt] = useState(0);\n  const [allPaidReward, setAllPaidReward] = useState(0);\n  const [accTokensPerShare, setAccTokensPerShare] = useState(0);\n  const [participants, setParticipants] = useState(0);\n  const [pendingReward, setPendingReward] = useState(0);\n  const [lastRewardTime, setLastRewardTime] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [finishTime, setFinishTime] = useState(0);\n  const [rewardPerSec, setRewardPerSec] = useState(0);\n\n  const [appStatus, setAppStatus] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [userBalance, setUserBalance] = useState('0');\n  const [currentStakingContractAddress, setCurrentStakingContract] = useState('');\n\n  const tokenContractAddress = '0x9f11c83606fe28542f0278797c78cb66488d7eef';\n  const stakingContractAddress = '0x5564F5c9f63B8C69d0D1D188306c96F1CD9E3fFD';\n\n  useEffect(() => {\n    //connecting to ethereum blockchain\n    fetchDataFromBlockchain();\n\n  }, [currentStakingContractAddress]);\n\n  const fetchDataFromBlockchain = async () => {\n    console.log('currentStakingContractAddress');\n    console.log(currentStakingContractAddress);\n    setLoader(true);\n    if (window.ethereum) {\n      // await window.ethereum.send('eth_requestAccounts');\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n\n      //connecting to metamask\n      let web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n\n      //loading users network ID and name\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      setNetwork({ ...network, id: networkId, name: networkType });\n\n      //loading TestTokenAbi contract data\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const testToken = new web3.eth.Contract(\n          TestTokenAbi,\n          tokenContractAddress\n        );\n        setTestTokenContract(testToken);\n\n        //  fetching balance of Testtoken and storing in state\n        let testTokenBalance = await testToken.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          testTokenBalance.toString(),\n          'Ether'\n        );\n        setUserBalance(convertedBalance);\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TestToken contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      if (networkId === 97) {\n        let web3 = window.web3;\n        const stakingCreationC = new web3.eth.Contract(\n          TokenStakingAbi,\n          stakingContractAddress,\n        );\n        setStakingCreationContract(stakingCreationC);\n\n        if (currentStakingContractAddress) {\n          const stakingContract = new web3.eth.Contract(\n              StakingAbi,\n              currentStakingContractAddress,\n          );\n          console.log(currentStakingContractAddress);\n          setTokenStakingContract(stakingContract);\n\n          let [\n            myStake,\n            allRewardDebt,\n            allPaidReward,\n            accTokensPerShare,\n            participants,\n            pendingReward,\n            lastRewardTime,\n            rewardPerSec,\n            startTime,\n            finishTime,\n            allStakedAmount,\n          ] = await Promise.all([\n            stakingContract.methods.getUserInfo(accounts[0]).call(),\n            stakingContract.methods.allRewardDebt().call(),\n            stakingContract.methods.allPaidReward().call(),\n            stakingContract.methods.accTokensPerShare().call(),\n            stakingContract.methods.participants().call(),\n            stakingContract.methods.pendingReward(accounts[0]).call(),\n            stakingContract.methods.lastRewardTime().call(),\n            stakingContract.methods.rewardPerSec().call(),\n            stakingContract.methods.startTime().call(),\n            stakingContract.methods.finishTime().call(),\n            stakingContract.methods.allStakedAmount().call(),\n          ])\n\n          myStake = window.web3.utils.fromWei(myStake[0].toString(), 'Ether');\n          allRewardDebt = window.web3.utils.fromWei(allRewardDebt.toString(), 'Ether');\n          allPaidReward = window.web3.utils.fromWei(allPaidReward.toString(), 'Ether');\n          accTokensPerShare = window.web3.utils.fromWei(accTokensPerShare.toString(), 'Ether');\n          pendingReward = window.web3.utils.fromWei(pendingReward.toString(), 'Ether');\n          rewardPerSec = window.web3.utils.fromWei(rewardPerSec.toString(), 'Ether');\n          allStakedAmount = allStakedAmount ? window.web3.utils.fromWei(allStakedAmount.toString(), 'Ether') : 0;\n          startTime = moment.unix(startTime).format(\"YYYY-MM-DD HH:mm\");\n          finishTime =  moment.unix(finishTime).format(\"YYYY-MM-DD HH:mm\");\n          lastRewardTime =  moment.unix(lastRewardTime).format(\"YYYY-MM-DD HH:mm\");\n\n          setMyStake(myStake);\n          setAllRewardDebt(allRewardDebt);\n          setAllPaidReward(allPaidReward);\n          setAccTokensPerShare(accTokensPerShare);\n          setPendingReward(pendingReward);\n          setRewardPerSec(rewardPerSec);\n          setAllStakedAmount(allStakedAmount);\n          setStartTime(startTime);\n          setFinishTime(finishTime);\n          setLastRewardTime(lastRewardTime);\n          setParticipants(participants);\n        } else {\n          console.log('exited');\n        }\n\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'Staking contract is not deployed on this network, please change to testnet'\n        );\n      }\n    } else if (!window.web3) {\n      setAppStatus(false);\n      setAccount('Metamask is not detected');\n    }\n\n    setLoader(false);\n  };\n\n  const inputHandler = (received) => {\n    setInputValue(received);\n  };\n\n  const stakingContractHandler = (contract) => {\n    setCurrentStakingContract(contract);\n  };\n\n  const stakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether');\n\n        //aproving tokens for spending\n        testTokenContract.methods\n          .approve(currentStakingContractAddress, convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            tokenStakingContract.methods\n              .stakeTokens(convertToWei)\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n          })\n          .on('error', function(error) {\n            setLoader(false);\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const unStakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n        tokenStakingContract.methods\n          .withdrawStake(convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n      }\n      setInputValue('');\n    }\n  };\n\n  const claimRewardsHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n        tokenStakingContract.methods\n          .withdrawStake(convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n      }\n      setInputValue('');\n    }\n  };\n\n  const reinvestRewardsHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      tokenStakingContract.methods\n          .reinvestTokens()\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n\n      setInputValue('');\n    }\n  };\n\n  const createStakingPoolHandler = (stakingObject) => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      let convertedToWei = window.web3.utils.toWei(stakingObject.poolTokenSupply, 'Ether');\n\n      //aproving tokens for spending\n      testTokenContract.methods\n        .approve(stakingContractAddress, convertedToWei)\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          stakingCreationContract.methods.createStakingPool(\n                stakingObject.stakeAddress,\n                stakingObject.poolAddress,\n                stakingObject.startBlock,\n                stakingObject.finishBlock,\n                convertedToWei,\n                stakingObject.hasWhitelisting,\n              )\n              .send({ from: account })\n              .on('transactionHash', (hash) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('receipt', (receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              })\n              .on('confirmation', (confirmationNumber, receipt) => {\n                setLoader(false);\n                fetchDataFromBlockchain();\n              });\n        })\n        .on('error', function(error) {\n          setLoader(false);\n          console.log('Error Code:', error.code);\n          console.log(error.message);\n        });\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className={classes.Grid}>\n      <div className={classes.ChildLoader}>\n        {loader ? <MutatingDots arialLabel=\"loading-indicator\" width=\"100px\" /> : null}\n      </div>\n      <div className={classes.Child1}>\n        <div>\n          <CreateStaking\n            createStakingPoolHandler={createStakingPoolHandler}\n          />\n        </div>\n      </div>\n      <div className={classes.Child2}>\n        <div className={classes.childHeight}>\n          <Staking\n              account={account}\n              userBalance={userBalance}\n              unStakeHandler={unStakeHandler}\n              stakeHandler={stakeHandler}\n              inputHandler={inputHandler}\n              stakingContractHandler={stakingContractHandler}\n              claimRewardsHandler={claimRewardsHandler}\n              reinvestRewardsHandler={reinvestRewardsHandler}\n          />\n        </div>\n      </div>\n      <div className={classes.Child3}>\n        <div>\n          <Info\n              account={account}\n\n              myStake={myStake}\n              allRewardDebt={allRewardDebt}\n              allPaidReward={allPaidReward}\n              accTokensPerShare={accTokensPerShare}\n              participants={participants}\n              pendingReward={pendingReward}\n              lastRewardTime={lastRewardTime}\n              startTime={startTime}\n              finishTime={finishTime}\n              rewardPerSec={rewardPerSec}\n              allStakedAmount={allStakedAmount}\n              userBalance={userBalance}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/stake.e8708439.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Staking\":\"Staking_Staking__Hf4Rk\",\"icon\":\"Staking_icon__3v_8B\",\"inputDiv\":\"Staking_inputDiv__bRjrw\",\"input\":\"Staking_input__1Z2Yu\",\"totals\":\"Staking_totals__uP4fZ\",\"goMax\":\"Staking_goMax__JDdIT\",\"stakeButton\":\"Staking_stakeButton__1-uE8\",\"unstakeButton\":\"Staking_unstakeButton__Hw_13\",\"stakeIcon\":\"Staking_stakeIcon__3l7fE\"};"],"sourceRoot":""}